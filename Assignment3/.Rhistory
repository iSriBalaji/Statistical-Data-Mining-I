version
q()
q()
q()
version
library(MASS)
data("Boston")
dim(Boston)
head(Boston)
?Boston
Boston[20,]
Boston[20,:]
Boston[20,]
Boston[1:10,]
plot(Boston$zn,Boston$indus, data = Boston)
?Boston
x11()
?Boston
pairs(Boston)
rnorm
?rnorm
a = 0.0001 * rnorm(1000)
a
?paste
paste('C', 1:20)
paste('C', 1:20, sep="")
paste('C', 1:20, sep="_")
paste('C', 1:20, sep="_")
runif
?runif
?data
set.seed(23)
data_points = 0.001 * rnorm(20000)
X_data = matrix(data_points, 1000, 20)
dim(X_data)
colnames(X_data) = paste('C', 1:20, sep="")
head(X_data,2)
X_data(1:2)
X_data[1:2]
X_data[2:2]
X_data[2:4]
X_data[2:1000]
X_data[10:10]
X_data[:10]
X_data[::10]
X_data[:10]
X_data[1:10]
X_data[1:1]
X_data[1,1]
X_data[3,1]
X_data[3,7]
X_data[10,7]
X_data[10:12,7]
X_data[10:12,7]
X_data[,21] = Y_data
coeff = runif(20)
coeff[c(5,8,11,16)] = 0
print(coeff)
Y_data = X_data %*% coeff
print(Y_data[1:5])
X_data[,21] = Y_data
Y_data = X_data %*% coeff
X_data
X_data[,21]
X_data[,21] = Y_data
cbind(X_data, Y_data)
cbind(X_data, Y_data)
colnames(X_data)
colnames(X_data)[20]
colnames(X_data)[21]
colnames(X_data)[21] = "C21"
colnames(X_data)[21] = "C21"
colnames(X_data)[21]
length(colnames(X_data)[21])
length()
colnames(X_data)[21] = "C21"
colnames(X_data)[20] = "C21"
colnames(X_data)
colnames(X_data)[21] = "C21"
sample(c(1:1000), size = round(8/10 * 1000), replace = FALSE)
random_index = sample(c(1:1000), size = round(9/10 * 1000), replace = FALSE)
train_data <- X_data[random_index,]
test_data <- X_data[-random_index,]
y_train_data <- train_data$C21
train_data
head(train_data,2)
train_data$C21
train_data[,21]
type(train_data)
typeof(train_data)
typeof(X_data)
dim(train_data)
dim(test_data)
train_data[,21]
train_data[:21]
train_data[1:21]
train_data[1:2]
train_data[1:3]
train_data[1:3,21]
train_data[1:3,20]
X_data = cbind(X_data, Y_data)
colnames(X_data)[21] = "C21"
head(X_data, 2)
train_data[1:3,20]
train_data[1:3,21]
X_data
X_data$C21
X_data = data.frame(X_data)
print(colnames(X_data))
X_data
for i in 1:20:
for i in 1:20{print(i)}
for (i in 1:20){print(i)}
?regsubset
library(leap)
library(leaps)
?regsubset
?regsubsets
?wwekly
?weekly
Weekly
?Weekly
install.packages(Weekly)
install.packages("Weekly")
library(Weekly)
summary(Weekly)
install.packages("Weekly")
ls("package: MASS")
library("Weekly")
?glm
set.seed(23)
random_index = sample(c(1:nrows(Weekly)), size = round(8/10 * nrows(Weekly)), replace = FALSE)
library(ISLR)
set.seed(23)
random_index = sample(c(1:nrows(Weekly)), size = round(8/10 * nrows(Weekly)), replace = FALSE)
Weekly
set.seed(23)
random_index = sample(c(1:nrow(Weekly)), size = round(8/10 * nrow(Weekly)), replace = FALSE)
train_data <- Weekly[random_index,]
test_data <- Weekly[-random_index,]
train_data = data.frame(train_data)
test_data = data.frame(test_data)
Weekly = data.frame(Weekly)
y_train_data <- train_data$Direction
y_test_data <- test_data$Direction
dim(train_data)
dim(test_data)
train_data[,-1]
train_data[,-1+8]
train_data[,-1:-8]
train_data[,-1:-8]
Weekly[,c(1,8)]
Weekly[,-c(1,8)]
?confusionMatrix
library(caret)
?confusionMatrix
?confusionMatrix
head(Weekly)
c(1990:2008)
1990 %in% c(1990:2008)
Weekly = Weekly[,c(1,3,9)]
random_index = which(Weekly$Year %in% c(1990:2008))
train_data <- Weekly[random_index,]
test_data <- Weekly[-random_index,]
train_data = data.frame(train_data[,-c(1)])
test_data = data.frame(test_data[,-c(1)])
Weekly = data.frame(Weekly)
y_train_data <- as.numeric(train_data$Direction)-1
y_test_data <- as.numeric(test_data$Direction)-1
Weekly = Weekly[,c(1,3,9)]
Weekly[,c(1,3,9)]
Weekly[,-c(1,3,9)]
Weekly[,-c(1,8)]
Weekly[,c(1,8)]
head(Weekly)
clearPushBack()
rm(list = ls)
rm(list = ls())
library(caret)
Weekly
Weekly[,c(1,8)]
Weekly[,-c(1,8)]
Weekly[,c(1,3,9)]
install.packages("KlaR")
library(KlaR)
install.packages("KlaR")
library(KlaR)
library('KlaR')
library(KlaR)
library(MASS)
library(KlaR)
?lda
?knn
Weekly$Year <= 2008
train=Weekly$Year <= 2008
Weekly[train,"Lag2",drop=F]
3**2
sqrt(5)
c(1:20)
rm(list = ls())
setwd("G:\\SDM_Sem01\\Assignment3")
load("Diabetes.RData")
install.packages('stringi')
install.packages("stringi")
View(Diabetes)
library(e1071)
library(ggplot2)
?cov
library(mvtnorm)
install.packages(mvtnorm)
install.packages("mvtnorm", repos="http://R-Forge.R-project.org")
to_predict = c(1.86, 184, 68, 122, 544)
new_data <-data.frame(to_predict)
colnames(new_data)<-c("relwt","glufast","glutest","instest","sspg")
colnames(new_data)
