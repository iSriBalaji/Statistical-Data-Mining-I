version
q()
q()
q()
version
library(MASS)
data("Boston")
dim(Boston)
head(Boston)
?Boston
Boston[20,]
Boston[20,:]
Boston[20,]
Boston[1:10,]
plot(Boston$zn,Boston$indus, data = Boston)
?Boston
x11()
?Boston
pairs(Boston)
library(ISLR2)
data(Boston)
names(Boston)
install.packages("bootstrap")
library(ISLR)
Auto
lda
?lda
library(MASS)
?lda
install.packages("rpart")
library(rpart)
model.controls = rpart.control(minbucket = 2, minsplit = 4, xval = 10, cp = 0)
rm(list = ls())
library(ISLR2)
library(leaps)
library(caret)
library(MASS)
library(rpart)
library(MMST)
data(Boston)
dim(Boston)
crim_medi = median(Boston$crim)
data = data.frame(Boston)
data$crim_class[data$crim>crim_medi] <- 1
data$crim_class[data$crim<=crim_medi] <- 0
tail(data,13)
set.seed(23)
random_index = sample(c(1:nrow(data)), size = round(8/10 * nrow(data)), replace = FALSE)
train_data <- data[random_index,]
test_data <- data[-random_index,]
y_train_data = train_data$crim_class
y_test_data = test_data$crim_class
dim(train_data)
dim(test_data)
model.controls = rpart.control(minbucket = 2, minsplit = 4, xval = 10, cp = 0)
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
model.controls = rpart.control(minbucket = 2, minsplit = 4, xval = 10, cp = 0.01)
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
model.controls = rpart.control(minbucket = 2, minsplit = 5, xval = 10, cp = 0)
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
?rpart
model.controls = rpart.control(minbucket = 9, minsplit = 3, xval = 5, cp = 0)
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
model.controls = rpart.control(cp = 0)
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
model.controls = rpart.control()
fit_boston = rpart(crim_class~., data = data, controls = model.controls)
head(Boston,3)
library(corrplot)
corrplot(Boston)
?trainControl
rm(list = ls())
setwd("G:\\SDM_Sem01\\Assignment5")
load("spam.RData")
install.packages("randomForest")
install.packages("geneplotter")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("geneplotter")
head(spam)
?spam
View(spam)
m = c(3,4,5,6,7,8,9,10,11,12)
for i in m:
print(i)
for (i in m):
print(i)
for (i in m){
print(i)}
require(ISLR2)
data("OJ")
load("cleaveland.RData")
load("cleveland.RData")
View(cleveland)
